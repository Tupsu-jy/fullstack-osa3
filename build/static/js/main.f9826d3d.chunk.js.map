{"version":3,"sources":["services/persons.js","components/Notification.js","components/App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","console","log","delete","Notification","message","className","Person","props","name","num","type","onClick","rp","People","list","i","pp","length","key","number","Filter","onChange","showFiltered","Add","onSubmit","addNote","value","newName","handleChange","newNum","handleChangeNum","App","useState","persons","setPersons","filterPersons","setfilterPersons","errorMessage","setErrorMessage","useEffect","personService","then","response","data","stringToCheck","setNewName","setNewNum","Remove","event","target","window","confirm","setTimeout","checkName","includes","filter","preventDefault","noteObject","found","find","e","catch","error","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9826d3d.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst del = (id) => {\n    console.log(\"delete\"+id)\n    return axios.delete(baseUrl+\"/\"+id)\n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update,\n    del: del\n}\n","import React from 'react'\n\nconst Notification = ({ message })=>{\n    if (message === null) {\n        return null\n      }\n    \n      return (\n        <div className=\"error\">\n          {message}\n        </div>\n      )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport personService from '../services/persons.js'\nimport Notification from './Notification.js'\nimport '../index.css'\n\nconst Person = (props) => {\n    //console.log(props.num)\n    return <>\n        <p>{props.name}  {props.num}  id: {props.id}</p>\n        <button type=\"submit\" onClick={props.rp} id={props.id} name={props.name}>DELETE</button>\n    </>\n}\n\nconst People = (props) => {\n    let list = [];\n    for (let i = 0; i < props.pp.length; i++) {\n        list[i] = <Person rp={props.rp} key={i} name={props.pp[i].name} num={props.pp[i].number} id={props.pp[i].id} />\n\n    }\n    return list;\n}\n\nconst Filter = (props) => {\n    return (\n        <div>\n            <p>filter shown with</p>\n            <input\n                onChange={props.showFiltered}\n            />\n        </div>\n    )\n}\n\n\nconst Add = (props) => {\n\n    return (<form onSubmit={props.addNote}>\n        <div>\n            name: <input\n                value={props.newName}\n                onChange={props.handleChange}\n            />\n        </div>\n        <div>\n            puhnum: <input\n                value={props.newNum}\n                onChange={props.handleChangeNum}\n            />\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>)\n\n}\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [filterPersons, setfilterPersons] = useState([])\n    const [errorMessage, setErrorMessage] = useState('')\n    console.log(\"asdasdasd\")\n    const hook = () => {\n        personService\n            .getAll()\n            .then(response => {\n                console.log(response)\n                setPersons(response.data)\n            })\n\n\n    }\n    useEffect(hook, [])\n\n    console.log(\"täällä raas\")\n    const [newName, setNewName] = useState('')\n    const [newNum, setNewNum] = useState('')\n\n    const Remove = (event) => {\n        console.log(\"remove\" + event.target.id)\n        if (window.confirm(\"Delete \" + event.target.name+\"?\")) {\n            personService\n                .del(event.target.id)\n                .then(\n                    personService\n                        .getAll()\n                        .then(response => {\n                            setPersons(response.data)\n                        })\n                );\n                setErrorMessage(event.target.name+\" deleted\")\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n        }\n\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        console.log('button clicked', event.target)\n        const noteObject = {\n            name: newName,\n            number: newNum\n        }\n        let found = persons.find(e => e.name === newName)\n        if (found != null) {\n\n            if (window.confirm(found.name + \" is already in book. Wanna replace old number with new?\")) {\n                personService\n                    .update(found.id, noteObject)\n                    .then(\n                        personService\n                            .getAll()\n                            .then(response => {\n                                setPersons(response.data)\n                            })\n                    )\n                    .catch(error => {\n                        setErrorMessage(\"This person has already been removed from server\")\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)                        \n                    })\n                    setErrorMessage(found.name+\" phone number updated\")\n                    setTimeout(() => {\n                        setErrorMessage(null)\n                    }, 5000)\n                }\n            //console.log(e)\n            //alert(`${newName} is already added to phonebook`)\n        } else {\n            personService\n                .create(noteObject)\n                .then(response => {\n                    setPersons(persons.concat(response.data))\n                })\n                setErrorMessage(noteObject.name+\"added\")\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n        }\n\n    }\n\n    const handleChange = (event) => {\n        console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n\n    const handleChangeNum = (event) => {\n        console.log(event.target.value)\n        setNewNum(event.target.value)\n    }\n\n    let stringToCheck\n    function checkName(name) {\n\n        return name.name.includes(stringToCheck)\n    }\n\n    const showFiltered = (event) => {\n        stringToCheck = event.target.value\n        setfilterPersons(persons.filter(checkName, event.target.value))\n    }\n\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <Notification message={errorMessage} />\n            <Filter pp={persons} showFiltered={showFiltered} />\n            <People pp={filterPersons} rp={Remove} />\n            <h2>Phonebook</h2>\n            <Add addNote={addNote} handleChange={handleChange} handleChangeNum={handleChangeNum} />\n            <h2>Numbers</h2>\n            <People pp={persons} rp={Remove} />\n        </div>\n    )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}